// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "updates.proto" (package "updates", syntax proto3)
// tslint:disable
import { ChatService } from "./updates";
import type { ChatMessage } from "./updates";
import type { BatchedChatMessages } from "./updates";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SimulationService } from "./updates";
import type { GenericResponse } from "./updates";
import type { InstructionUpdate } from "./updates";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SimulationUpdate } from "./updates";
import type { GenericRequest } from "./updates";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Services should be bi-directional streams but grpc-web does not support
 * client and bi-directional streaming.
 *
 * @generated from protobuf service updates.SimulationService
 */
export interface ISimulationServiceClient {
    /**
     * @generated from protobuf rpc: SubscribeToSimulation(updates.GenericRequest) returns (stream updates.SimulationUpdate);
     */
    subscribeToSimulation(input: GenericRequest, options?: RpcOptions): ServerStreamingCall<GenericRequest, SimulationUpdate>;
    /**
     * @generated from protobuf rpc: SendInstruction(updates.InstructionUpdate) returns (updates.GenericResponse);
     */
    sendInstruction(input: InstructionUpdate, options?: RpcOptions): UnaryCall<InstructionUpdate, GenericResponse>;
}
/**
 * Services should be bi-directional streams but grpc-web does not support
 * client and bi-directional streaming.
 *
 * @generated from protobuf service updates.SimulationService
 */
export class SimulationServiceClient implements ISimulationServiceClient, ServiceInfo {
    typeName = SimulationService.typeName;
    methods = SimulationService.methods;
    options = SimulationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubscribeToSimulation(updates.GenericRequest) returns (stream updates.SimulationUpdate);
     */
    subscribeToSimulation(input: GenericRequest, options?: RpcOptions): ServerStreamingCall<GenericRequest, SimulationUpdate> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericRequest, SimulationUpdate>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendInstruction(updates.InstructionUpdate) returns (updates.GenericResponse);
     */
    sendInstruction(input: InstructionUpdate, options?: RpcOptions): UnaryCall<InstructionUpdate, GenericResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstructionUpdate, GenericResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service updates.ChatService
 */
export interface IChatServiceClient {
    /**
     * @generated from protobuf rpc: SubscribeToChat(updates.GenericRequest) returns (stream updates.BatchedChatMessages);
     */
    subscribeToChat(input: GenericRequest, options?: RpcOptions): ServerStreamingCall<GenericRequest, BatchedChatMessages>;
    /**
     * @generated from protobuf rpc: SendChat(updates.ChatMessage) returns (updates.GenericResponse);
     */
    sendChat(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, GenericResponse>;
}
/**
 * @generated from protobuf service updates.ChatService
 */
export class ChatServiceClient implements IChatServiceClient, ServiceInfo {
    typeName = ChatService.typeName;
    methods = ChatService.methods;
    options = ChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubscribeToChat(updates.GenericRequest) returns (stream updates.BatchedChatMessages);
     */
    subscribeToChat(input: GenericRequest, options?: RpcOptions): ServerStreamingCall<GenericRequest, BatchedChatMessages> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenericRequest, BatchedChatMessages>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendChat(updates.ChatMessage) returns (updates.GenericResponse);
     */
    sendChat(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, GenericResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatMessage, GenericResponse>("unary", this._transport, method, opt, input);
    }
}
